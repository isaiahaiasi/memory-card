{"version":3,"sources":["components/Button.jsx","components/GamePlay.jsx","components/GameOver.jsx","components/GameStart.jsx","components/ScoreBoard.js","components/GameHandler.jsx","App.jsx","index.js"],"names":["Button","props","className","GamePlay","words","handleSelection","generateWordSet","newWordSet","Set","size","add","Number","parseInt","Math","random","length","useState","wordSet","setWordSet","Array","from","map","word","i","onClick","EndView","clickedWords","score","highScore","maxScore","restart","goHome","gameOverMsg","GameStart","handleStart","ScoreBoard","gameMode","GameHandler","currentGameMode","setGameMode","localStorage","getItem","setHighScore","setClickedWords","getScore","useEffect","setItem","includes","prevWords","Error","getGameRender","clearLocalStorage","console","log","clear","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b4fdd544.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Button(props) {\n  return <button {...props} className={props.className + \" btn\"} />;\n}\n","import React, { useState } from \"react\";\nimport Button from \"./Button\";\n\nexport default function GamePlay({ words, handleSelection }) {\n  const getRandomWord = () =>\n    words[Number.parseInt(Math.random() * words.length)];\n\n  const generateWordSet = () => {\n    // TODO: might want to account for case where there are no valid options\n    const newWordSet = new Set();\n    while (newWordSet.size < 4) {\n      newWordSet.add(getRandomWord());\n    }\n\n    return newWordSet;\n  };\n\n  const [wordSet, setWordSet] = useState(generateWordSet()); // 4 random words\n\n  const onClick = (word) => {\n    // TODO: add cooldown on click for transition & prevent accidental double-clicks\n    handleSelection(word);\n    setWordSet(generateWordSet());\n  };\n\n  return (\n    <div className=\"game-play-container\">\n      <section className=\"word-selector\">\n        {Array.from(wordSet).map((word, i) => (\n          <Button key={word + i} onClick={() => onClick(word)}>\n            {word}\n          </Button>\n        ))}\n      </section>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport default function EndView({\n  clickedWords,\n  score,\n  highScore,\n  maxScore,\n  restart,\n  goHome,\n}) {\n  const gameOverMsg =\n    score === maxScore\n      ? \"Impressive! Wow! Good job!\"\n      : score === highScore\n      ? \"Congratulations! New high score!\"\n      : \"Aww, better luck next time! :)\";\n\n  return (\n    <section className=\"game-over\">\n      <p>{gameOverMsg}</p>\n      <p>\n        {score}/{maxScore}\n      </p>\n      <p>Highscore: {highScore}</p>\n      <p>You clicked on these words:</p>\n      <ol className=\"game-over__word-list\">\n        {clickedWords.map((word) => (\n          <li key={word}>{word}</li>\n        ))}\n      </ol>\n      <Button onClick={restart}>Play Again?</Button>\n      <Button onClick={goHome}>Go to homepage</Button>\n    </section>\n  );\n}\n","import React from \"react\";\nimport Button from \"./Button\";\n\nexport default function GameStart({ handleStart }) {\n  return (\n    <section>\n      <h1>Rules:</h1>\n      <ul>\n        <li>Click on the words/phrases.</li>\n        <li>Don't click on the same word/phrase again.</li>\n      </ul>\n      <Button onClick={() => handleStart()}>Start Game!</Button>\n    </section>\n  );\n}\n","import React from \"react\";\n\nexport default function ScoreBoard({ score, highScore, maxScore }) {\n  return (\n    <div className=\"score-board\">\n      <p>Current Score:</p>\n      <p className=\"score-board__current-score\">\n        {score}/{maxScore}\n      </p>\n      <p>High Score: {highScore}</p>\n    </div>\n  );\n}\n","import \"../styles/game.css\";\nimport React, { useState, useEffect } from \"react\";\nimport words from \"../words.json\";\nimport GamePlay from \"./GamePlay\";\nimport GameOver from \"./GameOver\";\nimport GameStart from \"./GameStart\";\nimport ScoreBoard from \"./ScoreBoard\";\n\nconst gameMode = {\n  start: \"start\",\n  active: \"active\",\n  end: \"end\",\n};\n\nexport default function GameHandler() {\n  const [currentGameMode, setGameMode] = useState(gameMode.start);\n  const [highScore, setHighScore] = useState(\n    localStorage.getItem(\"highScore\") ?? 0\n  );\n  const [clickedWords, setClickedWords] = useState([]);\n\n  // this is the def of score, & I shouldn't have duplicate/derivable state\n  const getScore = () => clickedWords.length;\n\n  // save highscore in localstorage\n  // (I think this is the right way to useEffect?)\n  useEffect(() => {\n    localStorage.setItem(\"highScore\", highScore);\n  }, [highScore]);\n\n  const handleGameOver = () => {\n    if (getScore() > highScore) {\n      setHighScore(getScore());\n    }\n    setGameMode(gameMode.end);\n  };\n\n  const handleSelection = (word) => {\n    if (clickedWords.includes(word)) {\n      handleGameOver();\n    } else {\n      setClickedWords((prevWords) => [...prevWords, word]);\n    }\n  };\n\n  // RENDER LOGIC\n\n  const renderStart = () => {\n    return <GameStart handleStart={() => setGameMode(gameMode.active)} />;\n  };\n\n  const renderActive = () => {\n    // TODO: render ScoreBoard as well\n    return (\n      <div className=\"game-active\">\n        <ScoreBoard\n          score={getScore()}\n          highScore={highScore}\n          maxScore={words.length}\n        />\n        <GamePlay words={words} handleSelection={handleSelection} />\n      </div>\n    );\n  };\n\n  const renderGameOver = () => {\n    return (\n      <GameOver\n        clickedWords={clickedWords}\n        score={getScore()}\n        highScore={highScore}\n        maxScore={words.length}\n        restart={() => {\n          setClickedWords([]);\n          setGameMode(gameMode.active);\n        }}\n        goHome={() => {\n          setClickedWords([]);\n          setGameMode(gameMode.start);\n        }}\n      />\n    );\n  };\n\n  const getGameRender = () => {\n    switch (currentGameMode) {\n      case gameMode.start:\n        return renderStart();\n      case gameMode.active:\n        return renderActive();\n      case gameMode.end:\n        return renderGameOver();\n      default:\n        throw new Error(`Unhandled game state ${currentGameMode}`);\n    }\n  };\n\n  return <div className=\"game-container\">{getGameRender()}</div>;\n}\n","import React from \"react\";\n\nimport GameHandler from \"./components/GameHandler\";\n\n// this seems bad, b/c isn't this a side effect, which should be in a useEffect?\n// (but that doesn't work here either, don't want this to run on mount/unmount...)\nconst clearLocalStorage = () => {\n  console.log(\"localStorage cleared!\");\n  localStorage.clear();\n};\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <header>\n        <span>Memory Test</span>\n        <div className=\"gh-icon-placeholder\" onClick={clearLocalStorage}></div>\n      </header>\n      <GameHandler />\n      <footer>created by isaiahaiasi w/ :heart:</footer>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./styles/index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}